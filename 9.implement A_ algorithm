import heapq

class Node:
    def __init__(self, name, parent=None, g=0, h=0):
        self.name = name
        self.parent = parent
        self.g = g  # Cost from start node
        self.h = h  # Heuristic cost to goal
        self.f = g + h  # Total cost

    def __lt__(self, other):
        return self.f < other.f

def a_star_algorithm(start, goal, neighbors_func, heuristic_func):
    open_list = []
    closed_list = set()
    start_node = Node(start, None, 0, heuristic_func(start))
    goal_node = Node(goal)
    
    heapq.heappush(open_list, start_node)
    
    while open_list:
        current_node = heapq.heappop(open_list)
        
        if current_node.name == goal_node.name:
            path = []
            while current_node:
                path.append(current_node.name)
                current_node = current_node.parent
            return path[::-1]  # Return reversed path

        closed_list.add(current_node.name)

        for neighbor, cost in neighbors_func(current_node.name):
            if neighbor in closed_list:
                continue
            
            g = current_node.g + cost
            h = heuristic_func(neighbor)
            neighbor_node = Node(neighbor, current_node, g, h)

            if not any(node.name == neighbor and node.f <= neighbor_node.f for node in open_list):
                heapq.heappush(open_list, neighbor_node)

    return None  # No path found

# Example usage:
def neighbors_func(node):
    # Define the neighbors and costs
    neighbors = {
        'A': [('B', 1), ('C', 4)],
        'B': [('A', 1), ('C', 2), ('D', 5)],
        'C': [('A', 4), ('B', 2), ('D', 1)],
        'D': [('B', 5), ('C', 1)]
    }
    return neighbors.get(node, [])

def heuristic_func(node):
    # Define heuristic values
    heuristics = {
        'A': 7,
        'B': 6,
        'C': 2,
        'D': 0
    }
    return heuristics.get(node, float('inf'))

start = 'A'
goal = 'D'
path = a_star_algorithm(start, goal, neighbors_func, heuristic_func)

print(f"Path from {start} to {goal}: {path}")
